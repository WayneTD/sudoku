class Cell
  attr :index, false
  attr :row, false
  attr :column,  false
  attr :group, false
  attr :value, true

  def initialize(index, row, column, value)
    @index = index
    @row = row
    @column = column
    @group = derive_group
    @value = value
  end

  def derive_group()
    case @row
    when 1..3
      column_offset + 1
    when 4..6
      column_offset + 4
    when 7..9
      column_offset + 7
    end 
  end
    
  def column_offset()
    (@column - 1)/3
  end  
end

class Grid
  CELL_NEIGHBOUR_INDEXES = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 27, 36, 45, 54, 63, 72], [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 28, 37, 46, 55, 64, 73], [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 29, 38, 47, 56, 65, 74], [0, 1, 2, 4, 5, 6, 7, 8, 12, 13, 14, 21, 22, 23, 30, 39, 48, 57, 66, 75], [0, 1, 2, 3, 5, 6, 7, 8, 12, 13, 14, 21, 22, 23, 31, 40, 49, 58, 67, 76], [0, 1, 2, 3, 4, 6, 7, 8, 12, 13, 14, 21, 22, 23, 32, 41, 50, 59, 68, 77], [0, 1, 2, 3, 4, 5, 7, 8, 15, 16, 17, 24, 25, 26, 33, 42, 51, 60, 69, 78], [0, 1, 2, 3, 4, 5, 6, 8, 15, 16, 17, 24, 25, 26, 34, 43, 52, 61, 70, 79], [0, 1, 2, 3, 4, 5, 6, 7, 15, 16, 17, 24, 25, 26, 35, 44, 53, 62, 71, 80], [0, 1, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 36, 45, 54, 63, 72], [0, 1, 2, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 37, 46, 55, 64, 73], [0, 1, 2, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 29, 38, 47, 56, 65, 74], [3, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 23, 30, 39, 48, 57, 66, 75], [3, 4, 5, 9, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 31, 40, 49, 58, 67, 76], [3, 4, 5, 9, 10, 11, 12, 13, 15, 16, 17, 21, 22, 23, 32, 41, 50, 59, 68, 77], [6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 24, 25, 26, 33, 42, 51, 60, 69, 78], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 24, 25, 26, 34, 43, 52, 61, 70, 79], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 25, 26, 35, 44, 53, 62, 71, 80], [0, 1, 2, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 45, 54, 63, 72], [0, 1, 2, 9, 10, 11, 18, 20, 21, 22, 23, 24, 25, 26, 28, 37, 46, 55, 64, 73], [0, 1, 2, 9, 10, 11, 18, 19, 21, 22, 23, 24, 25, 26, 29, 38, 47, 56, 65, 74], [3, 4, 5, 12, 13, 14, 18, 19, 20, 22, 23, 24, 25, 26, 30, 39, 48, 57, 66, 75], [3, 4, 5, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 31, 40, 49, 58, 67, 76], [3, 4, 5, 12, 13, 14, 18, 19, 20, 21, 22, 24, 25, 26, 32, 41, 50, 59, 68, 77], [6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 33, 42, 51, 60, 69, 78], [6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 34, 43, 52, 61, 70, 79], [6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 44, 53, 62, 71, 80], [0, 9, 18, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 54, 63, 72], [1, 10, 19, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 55, 64, 73], [2, 11, 20, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 56, 65, 74], [3, 12, 21, 27, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 57, 66, 75], [4, 13, 22, 27, 28, 29, 30, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 58, 67, 76], [5, 14, 23, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 48, 49, 50, 59, 68, 77], [6, 15, 24, 27, 28, 29, 30, 31, 32, 34, 35, 42, 43, 44, 51, 52, 53, 60, 69, 78], [7, 16, 25, 27, 28, 29, 30, 31, 32, 33, 35, 42, 43, 44, 51, 52, 53, 61, 70, 79], [8, 17, 26, 27, 28, 29, 30, 31, 32, 33, 34, 42, 43, 44, 51, 52, 53, 62, 71, 80], [0, 9, 18, 27, 28, 29, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 63, 72], [1, 10, 19, 27, 28, 29, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 64, 73], [2, 11, 20, 27, 28, 29, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 56, 65, 74], [3, 12, 21, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 57, 66, 75], [4, 13, 22, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 44, 48, 49, 50, 58, 67, 76], [5, 14, 23, 30, 31, 32, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 59, 68, 77], [6, 15, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 51, 52, 53, 60, 69, 78], [7, 16, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 51, 52, 53, 61, 70, 79], [8, 17, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 52, 53, 62, 71, 80], [0, 9, 18, 27, 28, 29, 36, 37, 38, 46, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72], [1, 10, 19, 27, 28, 29, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 55, 64, 73], [2, 11, 20, 27, 28, 29, 36, 37, 38, 45, 46, 48, 49, 50, 51, 52, 53, 56, 65, 74], [3, 12, 21, 30, 31, 32, 39, 40, 41, 45, 46, 47, 49, 50, 51, 52, 53, 57, 66, 75], [4, 13, 22, 30, 31, 32, 39, 40, 41, 45, 46, 47, 48, 50, 51, 52, 53, 58, 67, 76], [5, 14, 23, 30, 31, 32, 39, 40, 41, 45, 46, 47, 48, 49, 51, 52, 53, 59, 68, 77], [6, 15, 24, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 60, 69, 78], [7, 16, 25, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 61, 70, 79], [8, 17, 26, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 62, 71, 80], [0, 9, 18, 27, 36, 45, 55, 56, 57, 58, 59, 60, 61, 62, 63, 72], [1, 10, 19, 28, 37, 46, 54, 56, 57, 58, 59, 60, 61, 62, 64, 73], [2, 11, 20, 29, 38, 47, 54, 55, 57, 58, 59, 60, 61, 62, 65, 74], [3, 12, 21, 30, 39, 48, 54, 55, 56, 58, 59, 60, 61, 62, 66, 75], [4, 13, 22, 31, 40, 49, 54, 55, 56, 57, 59, 60, 61, 62, 67, 76], [5, 14, 23, 32, 41, 50, 54, 55, 56, 57, 58, 60, 61, 62, 68, 77], [6, 15, 24, 33, 42, 51, 54, 55, 56, 57, 58, 59, 61, 62, 69, 78], [7, 16, 25, 34, 43, 52, 54, 55, 56, 57, 58, 59, 60, 62, 70, 79], [8, 17, 26, 35, 44, 53, 54, 55, 56, 57, 58, 59, 60, 61, 71, 80], [0, 9, 18, 27, 36, 45, 54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], [1, 10, 19, 28, 37, 46, 55, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], [2, 11, 20, 29, 38, 47, 56, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74], [3, 12, 21, 30, 39, 48, 57, 63, 64, 65, 67, 68, 69, 70, 71, 75, 76, 77], [4, 13, 22, 31, 40, 49, 58, 63, 64, 65, 66, 68, 69, 70, 71, 75, 76, 77], [5, 14, 23, 32, 41, 50, 59, 63, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77], [6, 15, 24, 33, 42, 51, 60, 63, 64, 65, 66, 67, 68, 70, 71, 78, 79, 80], [7, 16, 25, 34, 43, 52, 61, 63, 64, 65, 66, 67, 68, 69, 71, 78, 79, 80], [8, 17, 26, 35, 44, 53, 62, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 80], [0, 9, 18, 27, 36, 45, 54, 63, 64, 65, 73, 74, 75, 76, 77, 78, 79, 80], [1, 10, 19, 28, 37, 46, 55, 63, 64, 65, 72, 74, 75, 76, 77, 78, 79, 80], [2, 11, 20, 29, 38, 47, 56, 63, 64, 65, 72, 73, 75, 76, 77, 78, 79, 80], [3, 12, 21, 30, 39, 48, 57, 66, 67, 68, 72, 73, 74, 76, 77, 78, 79, 80], [4, 13, 22, 31, 40, 49, 58, 66, 67, 68, 72, 73, 74, 75, 77, 78, 79, 80], [5, 14, 23, 32, 41, 50, 59, 66, 67, 68, 72, 73, 74, 75, 76, 78, 79, 80], [6, 15, 24, 33, 42, 51, 60, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80], [7, 16, 25, 34, 43, 52, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80], [8, 17, 26, 35, 44, 53, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]]
  
  def initialize(grid = '0' * 81)
    values = grid.gsub(/[-+|\s]/, '')
    raise ArgumentError, "Invalid grid supplied" if values.length != 81
  
    @cells = []
    cell_index = 0
    (1..9).each do |row|
      (1..9).each do |column|
        @cells << Cell.new(cell_index, row, column, values[cell_index, 1].to_i)
        cell_index += 1
      end
    end
  end
  
	def is_solvable
		solved_cell_count = get_solved_cell_count
		return true if solved_cell_count == 81

		@cells.each do |cell|
			if cell.value == 0
				possible_values = get_cell_possible_values cell
				cell.value = possible_values[0] if possible_values.length == 1
			end
		end

		new_solved_cell_count = get_solved_cell_count
		return true if solved_cell_count == 81

		if new_solved_cell_count == solved_cell_count
			backup = backup_cells
			cell_with_2_possible_values = find_first_cell_with_2_possible_values
			return false if cell_with_2_possible_values == nil
			
			possible_values = get_cell_possible_values(cell_with_2_possible_values)
			cell_with_2_possible_values.value = possible_values[0]
			return true if is_solvable
			
			@cells = backup
			cell_with_2_possible_values = @cells[cell_with_2_possible_values.index]
			return false if cell_with_2_possible_values == nil

			cell_with_2_possible_values.value = possible_values[1]
		end

		self.is_solvable
	end
				
  def to_s
    values = @cells.map { |cell| cell.value }
    # slice up the array into groups of 3
    #  ==> [ [0,0,0], [0,0,0], ... [0,0,0] ]
    # then for each group of 3, join each value into a string
    #  ==> [ "000", "000", ... "000" ]
    groups_of_3 = values.each_slice(3).to_a.map {|value| value.join }
    # slice up into further groups of 3
    #  ==> [ ["000", "000", "000"], ["000", "000", "000"], ... ]
    # then join each row with a pipe
    #  ==> [ "000|000|000", "000|000|000", ... ]
    rows = groups_of_3.each_slice(3).to_a.map { |group| group.join("|") }
    # slice into 3 again and stitch them together and join them with the group row separator
    #  ==> "000|000|000---+---+---000|000|000---+---+---000|000|000..."
    rows.each_slice(3).to_a.map { |row| row.join }.join("---+---+---")
  end

  private
	  def get_solved_cell_count
	    @cells.count { |cell| cell.value != 0 }
	  end

    def get_neighbouring_cell_values(cell)
	    CELL_NEIGHBOUR_INDEXES[cell.index].map { |cell_index| @cells[cell_index].value }
		end
		
	  def backup_cells()
      @cells.map { |cell| Cell.new(cell.index, cell.row, cell.column, cell.value) }
    end

    def find_first_cell_with_2_possible_values
      @cells.find { |cell| get_cell_possible_values(cell).length == 2 }
    end

	  def get_cell_possible_values(cell)
		  values = []
      if cell.value == 0
  		  (1..9).each do |value|
		      values << value if get_neighbouring_cell_values(cell).find { |v| v == value } == nil
		    end
      end
		  values
    end
end
